
const canvas = document.querySelector('canvas');
const ctx = canvas.getContext('2d');

const [w, h] = [2000, 2000];

canvas.width = w;
canvas.height = h;

ncol = 18; //na verdade, o numero de fileiras
nrow = 25; // o numero de colunas

ndots = ncol * nrow;

const gap = w * 0.8 / (nrow - 1);

const margin = (h * 0.8) - ( (ncol - 1) * gap );

//console.log(gap, margin);

ctx.fillStyle = '#333';
ctx.fillRect(0, 0, w, h);

ctx.strokeStyle = 'yellow';
ctx.lineWidth = 10;

const x0 = w * 0.1;
const y0 = h * 0.1 + margin/2;

ctx.rect(x0, y0, (nrow-1) * gap, (ncol-1)*gap);
ctx.stroke();

const posicoes = [-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]

const nodes = [];
let k = 0;

const dimcolor = '#555';
palette = ['#c0a8ff', '#c0ffa8', '#ffc0a8', '#ffa8c0', '#c0d8ff', '#f0ffa8']

for (let j = 0; j < ncol; j++) {

    for (let i = 0; i < nrow; i++) {

        //const v = Math.floor(noise.perlin2(i/nrow, j/ncol) * 8);
        const v1 = Math.floor(Math.random() * 8);
        const v2 = -Math.floor(Math.random() * 8);

        const point = {

            n : k,

            color: 'white',

            color_random : palette[Math.floor(Math.random() * palette.length)],

            i : i,
            j : j,

            x : i * gap + x0,
            y : j * gap + y0,

            a1 : 4,
            a2 : 4,

            l : Math.sqrt(2) * gap/2, 
            //l: gap - 20,

            angulos : {
                inicial : [v1, v2],
                //inicial : [v, 8-v],
                //inicial : [noise.perlin2(i/nrow, j/ncol), -noise.perlin2(i/nrow, j/ncol) ],
                //inicial1 : [4, 0], //[i % 2 == 0 ? 0 : 4, j % 2 == 0 ? 2 : 6],
                //inicial2 : [0, 0],
                primeira : null,
                segunda : null
            }

        }

        k++;

        nodes.push(point);

    }

}

/*
 
  5 6 7
   \|/
 4 -+- 0
   /|\
  3 2 1

*/
const T_1_i = 4;
const T_1_j = 6;
const A_1_i = 8;
const A_1_j = 6;
const N_1_i = 12;
const N_1_j = 6;
const T_2_i = 17;
const T_2_j = 6;
const A_2_i = 21;
const A_2_j = 6;

const G_1_i = 3;
const G_1_j = 12;
const E_1_i = 8;
const E_1_j = 12;
const N_2_i = 12;
const N_2_j = 12;
const T_3_i = 17;
const T_3_j = 12;
const E_2_i = 21;
const E_2_j = 12;

const C_1_i = 12;
const C_1_j = 0;
const O_1_i = 16;
const O_1_j = 0;
const M_1_i = 20;
const M_1_j = 0;

const O_2_i = 0;
const O_2_j = 12;
const P_1_i = 4;
const P_1_j = 12;
const I_1_i = 8;
const I_1_j = 12;
const N_3_i = 10;
const N_3_j = 12;
const I_2_i = 15;
const I_2_j = 12;
const A_3_i = 17;
const A_3_j = 12;
const O_3_i = 21;
const O_3_j = 12;

const S_1_i = 5;
const S_1_j = 0
const O_4_i = 9;
const O_4_j = 0;
const B_1_i = 13;
const B_1_j = 0;
const R_1_i = 17;
const R_1_j = 0;
const E_3_i = 21;
const E_3_j = 0;

const C_2_i = 1;
const C_2_j = 12;
const O_5_i = 5;
const O_5_j = 12;
const I_3_i = 9;
const I_3_j = 12;
const S_2_i = 11;
const S_2_j = 12;
const A_4_i = 15;
const A_4_j = 12;

const ret_i = 19;
const ret_j = 16;




const posicoes_primeira = [
    // [[i,j], [a1, a2]]

    // TANTA

    // T
    [ [0 + T_1_i, 0 + T_1_j],  [2, 0] ],
    [ [1 + T_1_i, 0 + T_1_j],  [4, 0] ],
    [ [2 + T_1_i, 0 + T_1_j],  [4, 0] ],
    [ [3 + T_1_i, 0 + T_1_j],  [4, 2] ],
    [ [0 + T_1_i, 1 + T_1_j],  [6, 0] ],
    [ [1 + T_1_i, 1 + T_1_j],  [4, 2] ],
    [ [1 + T_1_i, 2 + T_1_j],  [6, 2] ],
    [ [1 + T_1_i, 3 + T_1_j], [6, 2] ],
    [ [1 + T_1_i, 4 + T_1_j], [6, 2] ],
    [ [1 + T_1_i, 5 + T_1_j], [6, 0] ],
    [ [2 + T_1_i, 5 + T_1_j], [4, 6] ],
    [ [2 + T_1_i, 4 + T_1_j], [6, 2] ],
    [ [2 + T_1_i, 3 + T_1_j], [6, 2] ],
    [ [2 + T_1_i, 2 + T_1_j], [6, 2] ],
    [ [2 + T_1_i, 1 + T_1_j], [0, 2] ],
    [ [3 + T_1_i, 1 + T_1_j], [6, 4] ],

    // A
    [ [0 + A_1_i, 0 + A_1_j],  [2, 0] ],
    [ [1 + A_1_i, 0 + A_1_j],  [4, 0] ],
    [ [2 + A_1_i, 0 + A_1_j],  [4, 0] ],
    [ [3 + A_1_i, 0 + A_1_j],  [4, 2] ],
    [ [0 + A_1_i, 1 + A_1_j],  [6, 2] ],
    [ [1 + A_1_i, 1 + A_1_j],  [2, 0] ],
    [ [2 + A_1_i, 1 + A_1_j],  [4, 2] ],
    [ [3 + A_1_i, 1 + A_1_j],  [6, 2] ],
    [ [0 + A_1_i, 2 + A_1_j],  [6, 2] ],
    [ [1 + A_1_i, 2 + A_1_j],  [6, 0] ],
    [ [2 + A_1_i, 2 + A_1_j],  [4, 6] ],
    [ [3 + A_1_i, 2 + A_1_j],  [6, 2] ],
    [ [0 + A_1_i, 3 + A_1_j],  [6, 2] ],
    [ [1 + A_1_i, 3 + A_1_j],  [2, 0] ],
    [ [2 + A_1_i, 3 + A_1_j],  [4, 2] ],
    [ [3 + A_1_i, 3 + A_1_j],  [6, 2] ],
    [ [0 + A_1_i, 4 + A_1_j],  [6, 2] ],
    [ [1 + A_1_i, 4 + A_1_j],  [2, 6] ],
    [ [2 + A_1_i, 4 + A_1_j],  [6, 2] ],
    [ [3 + A_1_i, 4 + A_1_j],  [6, 2] ],
    [ [0 + A_1_i, 5 + A_1_j],  [6, 0] ],
    [ [1 + A_1_i, 5 + A_1_j],  [4, 6] ],
    [ [2 + A_1_i, 5 + A_1_j],  [6, 0] ],
    [ [3 + A_1_i, 5 + A_1_j],  [6, 4] ],

    // N
    [ [0 + N_1_i, 0 + N_1_j],  [0, 2] ],
    [ [1 + N_1_i, 0 + N_1_j],  [4, 1] ],
    [ [3 + N_1_i, 0 + N_1_j],  [0, 2] ],
    [ [4 + N_1_i, 0 + N_1_j],  [4, 2] ],
    [ [0 + N_1_i, 1 + N_1_j],  [6, 2] ],
    [ [2 + N_1_i, 1 + N_1_j],  [5, 1] ],
    [ [3 + N_1_i, 1 + N_1_j],  [6, 2] ],
    [ [4 + N_1_i, 1 + N_1_j],  [6, 2] ],
    [ [0 + N_1_i, 2 + N_1_j],  [6, 2] ],
    [ [3 + N_1_i, 2 + N_1_j],  [6, 5] ],
    [ [4 + N_1_i, 2 + N_1_j],  [6, 2] ],
    [ [0 + N_1_i, 3 + N_1_j],  [6, 2] ],
    [ [1 + N_1_i, 3 + N_1_j],  [1, 2] ],
    [ [4 + N_1_i, 3 + N_1_j],  [6, 2] ],
    [ [0 + N_1_i, 4 + N_1_j],  [6, 2] ],
    [ [1 + N_1_i, 4 + N_1_j],  [6, 2] ],
    [ [2 + N_1_i, 4 + N_1_j],  [5, 1] ],
    [ [4 + N_1_i, 4 + N_1_j],  [6, 2] ],
    [ [0 + N_1_i, 5 + N_1_j],  [6, 0] ],
    [ [1 + N_1_i, 5 + N_1_j],  [6, 4] ],
    [ [3 + N_1_i, 5 + N_1_j],  [5, 0] ],
    [ [4 + N_1_i, 5 + N_1_j],  [6, 4] ],

    // T
    [ [0 + T_2_i, 0 + T_2_j],  [2, 0] ],
    [ [1 + T_2_i, 0 + T_2_j],  [4, 0] ],
    [ [2 + T_2_i, 0 + T_2_j],  [4, 0] ],
    [ [3 + T_2_i, 0 + T_2_j],  [4, 2] ],
    [ [0 + T_2_i, 1 + T_2_j],  [6, 0] ],
    [ [1 + T_2_i, 1 + T_2_j],  [4, 2] ],
    [ [1 + T_2_i, 2 + T_2_j],  [6, 2] ],
    [ [1 + T_2_i, 3 + T_2_j], [6, 2] ],
    [ [1 + T_2_i, 4 + T_2_j], [6, 2] ],
    [ [1 + T_2_i, 5 + T_2_j], [6, 0] ],
    [ [2 + T_2_i, 5 + T_2_j], [4, 6] ],
    [ [2 + T_2_i, 4 + T_2_j], [6, 2] ],
    [ [2 + T_2_i, 3 + T_2_j], [6, 2] ],
    [ [2 + T_2_i, 2 + T_2_j], [6, 2] ],
    [ [2 + T_2_i, 1 + T_2_j], [0, 2] ],
    [ [3 + T_2_i, 1 + T_2_j], [6, 4] ],

    // A
    [ [0 + A_2_i, 0 + A_2_j],  [2, 0] ],
    [ [1 + A_2_i, 0 + A_2_j],  [4, 0] ],
    [ [2 + A_2_i, 0 + A_2_j],  [4, 0] ],
    [ [3 + A_2_i, 0 + A_2_j],  [4, 2] ],
    [ [0 + A_2_i, 1 + A_2_j],  [6, 2] ],
    [ [1 + A_2_i, 1 + A_2_j],  [2, 0] ],
    [ [2 + A_2_i, 1 + A_2_j],  [4, 2] ],
    [ [3 + A_2_i, 1 + A_2_j],  [6, 2] ],
    [ [0 + A_2_i, 2 + A_2_j],  [6, 2] ],
    [ [1 + A_2_i, 2 + A_2_j],  [6, 0] ],
    [ [2 + A_2_i, 2 + A_2_j],  [4, 6] ],
    [ [3 + A_2_i, 2 + A_2_j],  [6, 2] ],
    [ [0 + A_2_i, 3 + A_2_j],  [6, 2] ],
    [ [1 + A_2_i, 3 + A_2_j],  [2, 0] ],
    [ [2 + A_2_i, 3 + A_2_j],  [4, 2] ],
    [ [3 + A_2_i, 3 + A_2_j],  [6, 2] ],
    [ [0 + A_2_i, 4 + A_2_j],  [6, 2] ],
    [ [1 + A_2_i, 4 + A_2_j],  [2, 6] ],
    [ [2 + A_2_i, 4 + A_2_j],  [6, 2] ],
    [ [3 + A_2_i, 4 + A_2_j],  [6, 2] ],
    [ [0 + A_2_i, 5 + A_2_j],  [6, 0] ],
    [ [1 + A_2_i, 5 + A_2_j],  [4, 6] ],
    [ [2 + A_2_i, 5 + A_2_j],  [6, 0] ],
    [ [3 + A_2_i, 5 + A_2_j],  [6, 4] ],

    // GENTE

    // G
    [ [0 + G_1_i, 0 + G_1_j],  [2, 0] ],
    [ [1 + G_1_i, 0 + G_1_j],  [4, 0] ],
    [ [2 + G_1_i, 0 + G_1_j],  [4, 0] ],
    [ [3 + G_1_i, 0 + G_1_j],  [4, 0] ],
    [ [4 + G_1_i, 0 + G_1_j],  [4, 2] ],
    [ [0 + G_1_i, 1 + G_1_j],  [2, 6] ],
    [ [1 + G_1_i, 1 + G_1_j],  [2, 0] ],
    [ [2 + G_1_i, 1 + G_1_j],  [4, 0] ],
    [ [3 + G_1_i, 1 + G_1_j],  [4, 0] ],
    [ [4 + G_1_i, 1 + G_1_j],  [4, 6] ],
    [ [0 + G_1_i, 2 + G_1_j],  [2, 6] ],
    [ [1 + G_1_i, 2 + G_1_j],  [2, 6] ],
    [ [2 + G_1_i, 2 + G_1_j],  [2, 0] ],
    [ [3 + G_1_i, 2 + G_1_j],  [4, 0] ],
    [ [4 + G_1_i, 2 + G_1_j],  [4, 2] ],
    [ [0 + G_1_i, 3 + G_1_j],  [2, 6] ],
    [ [1 + G_1_i, 3 + G_1_j],  [2, 6] ],
    [ [2 + G_1_i, 3 + G_1_j],  [6, 0] ],
    [ [3 + G_1_i, 3 + G_1_j],  [4, 2] ],
    [ [4 + G_1_i, 3 + G_1_j],  [6, 2] ],
    [ [0 + G_1_i, 4 + G_1_j],  [2, 6] ],
    [ [1 + G_1_i, 4 + G_1_j],  [0, 6] ],
    [ [2 + G_1_i, 4 + G_1_j],  [4, 0] ],
    [ [3 + G_1_i, 4 + G_1_j],  [4, 6] ],
    [ [4 + G_1_i, 4 + G_1_j],  [6, 2] ],
    [ [0 + G_1_i, 5 + G_1_j],  [0, 6] ],
    [ [1 + G_1_i, 5 + G_1_j],  [0, 4] ],
    [ [2 + G_1_i, 5 + G_1_j],  [4, 0] ],
    [ [3 + G_1_i, 5 + G_1_j],  [4, 0] ],
    [ [4 + G_1_i, 5 + G_1_j],  [6, 4] ],

    // E
    [ [0 + E_1_i, 0 + E_1_j],  [2, 0] ],
    [ [1 + E_1_i, 0 + E_1_j],  [4, 0] ],
    [ [2 + E_1_i, 0 + E_1_j],  [4, 0] ],
    [ [3 + E_1_i, 0 + E_1_j],  [2, 4] ],
    [ [0 + E_1_i, 1 + E_1_j],  [2, 6] ],
    [ [1 + E_1_i, 1 + E_1_j],  [2, 0] ],
    [ [2 + E_1_i, 1 + E_1_j],  [4, 0] ],
    [ [3 + E_1_i, 1 + E_1_j],  [6, 4] ],
    [ [0 + E_1_i, 2 + E_1_j],  [2, 6] ],
    [ [1 + E_1_i, 2 + E_1_j],  [6, 0] ],
    [ [2 + E_1_i, 2 + E_1_j],  [4, 2] ],
    [ [0 + E_1_i, 3 + E_1_j],  [2, 6] ],
    [ [1 + E_1_i, 3 + E_1_j],  [2, 0] ],
    [ [2 + E_1_i, 3 + E_1_j],  [4, 6] ],
    [ [0 + E_1_i, 4 + E_1_j],  [2, 6] ],
    [ [1 + E_1_i, 4 + E_1_j],  [6, 0] ],
    [ [2 + E_1_i, 4 + E_1_j],  [4, 0] ],
    [ [3 + E_1_i, 4 + E_1_j],  [2, 4] ],
    [ [0 + E_1_i, 5 + E_1_j],  [0, 6] ],
    [ [1 + E_1_i, 5 + E_1_j],  [4, 0] ],
    [ [2 + E_1_i, 5 + E_1_j],  [4, 0] ],
    [ [3 + E_1_i, 5 + E_1_j],  [6, 4] ],

    // N
    [ [0 + N_2_i, 0 + N_2_j],  [0, 2] ],
    [ [1 + N_2_i, 0 + N_2_j],  [4, 1] ],
    [ [3 + N_2_i, 0 + N_2_j],  [0, 2] ],
    [ [4 + N_2_i, 0 + N_2_j],  [4, 2] ],
    [ [0 + N_2_i, 1 + N_2_j],  [6, 2] ],
    [ [2 + N_2_i, 1 + N_2_j],  [5, 1] ],
    [ [3 + N_2_i, 1 + N_2_j],  [6, 2] ],
    [ [4 + N_2_i, 1 + N_2_j],  [6, 2] ],
    [ [0 + N_2_i, 2 + N_2_j],  [6, 2] ],
    [ [3 + N_2_i, 2 + N_2_j],  [6, 5] ],
    [ [4 + N_2_i, 2 + N_2_j],  [6, 2] ],
    [ [0 + N_2_i, 3 + N_2_j],  [6, 2] ],
    [ [1 + N_2_i, 3 + N_2_j],  [1, 2] ],
    [ [4 + N_2_i, 3 + N_2_j],  [6, 2] ],
    [ [0 + N_2_i, 4 + N_2_j],  [6, 2] ],
    [ [1 + N_2_i, 4 + N_2_j],  [6, 2] ],
    [ [2 + N_2_i, 4 + N_2_j],  [5, 1] ],
    [ [4 + N_2_i, 4 + N_2_j],  [6, 2] ],
    [ [0 + N_2_i, 5 + N_2_j],  [6, 0] ],
    [ [1 + N_2_i, 5 + N_2_j],  [6, 4] ],
    [ [3 + N_2_i, 5 + N_2_j],  [5, 0] ],
    [ [4 + N_2_i, 5 + N_2_j],  [6, 4] ],

    // T
    [ [0 + T_3_i, 0 + T_3_j],  [2, 0] ],
    [ [1 + T_3_i, 0 + T_3_j],  [4, 0] ],
    [ [2 + T_3_i, 0 + T_3_j],  [4, 0] ],
    [ [3 + T_3_i, 0 + T_3_j],  [4, 2] ],
    [ [0 + T_3_i, 1 + T_3_j],  [6, 0] ],
    [ [1 + T_3_i, 1 + T_3_j],  [4, 2] ],
    [ [1 + T_3_i, 2 + T_3_j],  [6, 2] ],
    [ [1 + T_3_i, 3 + T_3_j], [6, 2] ],
    [ [1 + T_3_i, 4 + T_3_j], [6, 2] ],
    [ [1 + T_3_i, 5 + T_3_j], [6, 0] ],
    [ [2 + T_3_i, 5 + T_3_j], [4, 6] ],
    [ [2 + T_3_i, 4 + T_3_j], [6, 2] ],
    [ [2 + T_3_i, 3 + T_3_j], [6, 2] ],
    [ [2 + T_3_i, 2 + T_3_j], [6, 2] ],
    [ [2 + T_3_i, 1 + T_3_j], [0, 2] ],
    [ [3 + T_3_i, 1 + T_3_j], [6, 4] ],

    // E
    [ [0 + E_2_i, 0 + E_2_j],  [2, 0] ],
    [ [1 + E_2_i, 0 + E_2_j],  [4, 0] ],
    [ [2 + E_2_i, 0 + E_2_j],  [4, 0] ],
    [ [3 + E_2_i, 0 + E_2_j],  [2, 4] ],
    [ [0 + E_2_i, 1 + E_2_j],  [2, 6] ],
    [ [1 + E_2_i, 1 + E_2_j],  [2, 0] ],
    [ [2 + E_2_i, 1 + E_2_j],  [4, 0] ],
    [ [3 + E_2_i, 1 + E_2_j],  [6, 4] ],
    [ [0 + E_2_i, 2 + E_2_j],  [2, 6] ],
    [ [1 + E_2_i, 2 + E_2_j],  [6, 0] ],
    [ [2 + E_2_i, 2 + E_2_j],  [4, 2] ],
    [ [0 + E_2_i, 3 + E_2_j],  [2, 6] ],
    [ [1 + E_2_i, 3 + E_2_j],  [2, 0] ],
    [ [2 + E_2_i, 3 + E_2_j],  [4, 6] ],
    [ [0 + E_2_i, 4 + E_2_j],  [2, 6] ],
    [ [1 + E_2_i, 4 + E_2_j],  [6, 0] ],
    [ [2 + E_2_i, 4 + E_2_j],  [4, 0] ],
    [ [3 + E_2_i, 4 + E_2_j],  [2, 4] ],
    [ [0 + E_2_i, 5 + E_2_j],  [0, 6] ],
    [ [1 + E_2_i, 5 + E_2_j],  [4, 0] ],
    [ [2 + E_2_i, 5 + E_2_j],  [4, 0] ],
    [ [3 + E_2_i, 5 + E_2_j],  [6, 4] ]

];

const posicoes_segunda = [

    // [[i,j], [a1, a2]]

    // COM

    // C
    [ [0 + C_1_i, 0 + C_1_j],  [2, 0] ],
    [ [1 + C_1_i, 0 + C_1_j],  [4, 0] ],
    [ [2 + C_1_i, 0 + C_1_j],  [4, 0] ],
    [ [3 + C_1_i, 0 + C_1_j],  [2, 4] ],
    [ [0 + C_1_i, 1 + C_1_j],  [2, 6] ],
    [ [1 + C_1_i, 1 + C_1_j],  [2, 0] ],
    [ [2 + C_1_i, 1 + C_1_j],  [4, 0] ],
    [ [3 + C_1_i, 1 + C_1_j],  [6, 4] ],
    [ [0 + C_1_i, 2 + C_1_j],  [2, 6] ],
    [ [1 + C_1_i, 2 + C_1_j],  [2, 6] ],
    [ [0 + C_1_i, 3 + C_1_j],  [2, 6] ],
    [ [1 + C_1_i, 3 + C_1_j],  [2, 6] ],
    [ [0 + C_1_i, 4 + C_1_j],  [2, 6] ],
    [ [1 + C_1_i, 4 + C_1_j],  [6, 0] ],
    [ [2 + C_1_i, 4 + C_1_j],  [4, 0] ],
    [ [3 + C_1_i, 4 + C_1_j],  [2, 4] ],
    [ [0 + C_1_i, 5 + C_1_j],  [0, 6] ],
    [ [1 + C_1_i, 5 + C_1_j],  [4, 0] ],
    [ [2 + C_1_i, 5 + C_1_j],  [4, 0] ],
    [ [3 + C_1_i, 5 + C_1_j],  [6, 4] ],

    // O
    [ [0 + O_1_i, 0 + O_1_j],  [2, 0] ],
    [ [1 + O_1_i, 0 + O_1_j],  [4, 0] ],
    [ [2 + O_1_i, 0 + O_1_j],  [4, 0] ],
    [ [3 + O_1_i, 0 + O_1_j],  [2, 4] ],
    [ [0 + O_1_i, 1 + O_1_j],  [2, 6] ],
    [ [1 + O_1_i, 1 + O_1_j],  [2, 0] ],
    [ [2 + O_1_i, 1 + O_1_j],  [4, 2] ],
    [ [3 + O_1_i, 1 + O_1_j],  [6, 2] ],
    [ [0 + O_1_i, 2 + O_1_j],  [2, 6] ],
    [ [1 + O_1_i, 2 + O_1_j],  [2, 6] ],
    [ [2 + O_1_i, 2 + O_1_j],  [6, 2] ],
    [ [3 + O_1_i, 2 + O_1_j],  [6, 2] ],
    [ [0 + O_1_i, 3 + O_1_j],  [2, 6] ],
    [ [1 + O_1_i, 3 + O_1_j],  [2, 6] ],
    [ [2 + O_1_i, 3 + O_1_j],  [6, 2] ],
    [ [3 + O_1_i, 3 + O_1_j],  [6, 2] ],
    [ [0 + O_1_i, 4 + O_1_j],  [2, 6] ],
    [ [1 + O_1_i, 4 + O_1_j],  [0, 6] ],
    [ [2 + O_1_i, 4 + O_1_j],  [6, 4] ],
    [ [3 + O_1_i, 4 + O_1_j],  [6, 2] ],
    [ [0 + O_1_i, 5 + O_1_j],  [0, 6] ],
    [ [1 + O_1_i, 5 + O_1_j],  [4, 0] ],
    [ [2 + O_1_i, 5 + O_1_j],  [4, 0] ],
    [ [3 + O_1_i, 5 + O_1_j],  [6, 4] ],

    // M
    [ [0 + M_1_i, 0 + M_1_j],  [2, 0] ],
    [ [1 + M_1_i, 0 + M_1_j],  [4, 1] ],
    [ [3 + M_1_i, 0 + M_1_j],  [3, 0] ],
    [ [4 + M_1_i, 0 + M_1_j],  [4, 2] ],
    [ [0 + M_1_i, 1 + M_1_j],  [2, 6] ],
    [ [1 + M_1_i, 1 + M_1_j],  [2, 1] ],
    [ [2 + M_1_i, 1 + M_1_j],  [5, 7] ],
    [ [3 + M_1_i, 1 + M_1_j],  [3, 2] ],
    [ [4 + M_1_i, 1 + M_1_j],  [6, 2] ],
    [ [0 + M_1_i, 2 + M_1_j],  [2, 6] ],
    [ [1 + M_1_i, 2 + M_1_j],  [2, 6] ],
    [ [2 + M_1_i, 2 + M_1_j],  [5, 7] ],
    [ [3 + M_1_i, 2 + M_1_j],  [6, 2] ],
    [ [4 + M_1_i, 2 + M_1_j],  [6, 2] ],
    [ [0 + M_1_i, 3 + M_1_j],  [2, 6] ],
    [ [1 + M_1_i, 3 + M_1_j],  [2, 6] ],
    [ [3 + M_1_i, 3 + M_1_j],  [6, 2] ],
    [ [4 + M_1_i, 3 + M_1_j],  [6, 2] ],
    [ [0 + M_1_i, 4 + M_1_j],  [2, 6] ],
    [ [1 + M_1_i, 4 + M_1_j],  [2, 6] ],
    [ [3 + M_1_i, 4 + M_1_j],  [6, 2] ],
    [ [4 + M_1_i, 4 + M_1_j],  [6, 2] ],
    [ [0 + M_1_i, 5 + M_1_j],  [0, 6] ],
    [ [1 + M_1_i, 5 + M_1_j],  [4, 6] ],
    [ [3 + M_1_i, 5 + M_1_j],  [6, 0] ],
    [ [4 + M_1_i, 5 + M_1_j],  [6, 4] ],


    // TANTA

    // T
    [ [0 + T_1_i, 0 + T_1_j],  [2, 0] ],
    [ [1 + T_1_i, 0 + T_1_j],  [4, 0] ],
    [ [2 + T_1_i, 0 + T_1_j],  [4, 0] ],
    [ [3 + T_1_i, 0 + T_1_j],  [4, 2] ],
    [ [0 + T_1_i, 1 + T_1_j],  [6, 0] ],
    [ [1 + T_1_i, 1 + T_1_j],  [4, 2] ],
    [ [1 + T_1_i, 2 + T_1_j],  [6, 2] ],
    [ [1 + T_1_i, 3 + T_1_j], [6, 2] ],
    [ [1 + T_1_i, 4 + T_1_j], [6, 2] ],
    [ [1 + T_1_i, 5 + T_1_j], [6, 0] ],
    [ [2 + T_1_i, 5 + T_1_j], [4, 6] ],
    [ [2 + T_1_i, 4 + T_1_j], [6, 2] ],
    [ [2 + T_1_i, 3 + T_1_j], [6, 2] ],
    [ [2 + T_1_i, 2 + T_1_j], [6, 2] ],
    [ [2 + T_1_i, 1 + T_1_j], [0, 2] ],
    [ [3 + T_1_i, 1 + T_1_j], [6, 4] ],

    // A
    [ [0 + A_1_i, 0 + A_1_j],  [2, 0] ],
    [ [1 + A_1_i, 0 + A_1_j],  [4, 0] ],
    [ [2 + A_1_i, 0 + A_1_j],  [4, 0] ],
    [ [3 + A_1_i, 0 + A_1_j],  [4, 2] ],
    [ [0 + A_1_i, 1 + A_1_j],  [6, 2] ],
    [ [1 + A_1_i, 1 + A_1_j],  [2, 0] ],
    [ [2 + A_1_i, 1 + A_1_j],  [4, 2] ],
    [ [3 + A_1_i, 1 + A_1_j],  [6, 2] ],
    [ [0 + A_1_i, 2 + A_1_j],  [6, 2] ],
    [ [1 + A_1_i, 2 + A_1_j],  [6, 0] ],
    [ [2 + A_1_i, 2 + A_1_j],  [4, 6] ],
    [ [3 + A_1_i, 2 + A_1_j],  [6, 2] ],
    [ [0 + A_1_i, 3 + A_1_j],  [6, 2] ],
    [ [1 + A_1_i, 3 + A_1_j],  [2, 0] ],
    [ [2 + A_1_i, 3 + A_1_j],  [4, 2] ],
    [ [3 + A_1_i, 3 + A_1_j],  [6, 2] ],
    [ [0 + A_1_i, 4 + A_1_j],  [6, 2] ],
    [ [1 + A_1_i, 4 + A_1_j],  [2, 6] ],
    [ [2 + A_1_i, 4 + A_1_j],  [6, 2] ],
    [ [3 + A_1_i, 4 + A_1_j],  [6, 2] ],
    [ [0 + A_1_i, 5 + A_1_j],  [6, 0] ],
    [ [1 + A_1_i, 5 + A_1_j],  [4, 6] ],
    [ [2 + A_1_i, 5 + A_1_j],  [6, 0] ],
    [ [3 + A_1_i, 5 + A_1_j],  [6, 4] ],

    // N
    [ [0 + N_1_i, 0 + N_1_j],  [0, 2] ],
    [ [1 + N_1_i, 0 + N_1_j],  [4, 1] ],
    [ [3 + N_1_i, 0 + N_1_j],  [0, 2] ],
    [ [4 + N_1_i, 0 + N_1_j],  [4, 2] ],
    [ [0 + N_1_i, 1 + N_1_j],  [6, 2] ],
    [ [2 + N_1_i, 1 + N_1_j],  [5, 1] ],
    [ [3 + N_1_i, 1 + N_1_j],  [6, 2] ],
    [ [4 + N_1_i, 1 + N_1_j],  [6, 2] ],
    [ [0 + N_1_i, 2 + N_1_j],  [6, 2] ],
    [ [3 + N_1_i, 2 + N_1_j],  [6, 5] ],
    [ [4 + N_1_i, 2 + N_1_j],  [6, 2] ],
    [ [0 + N_1_i, 3 + N_1_j],  [6, 2] ],
    [ [1 + N_1_i, 3 + N_1_j],  [1, 2] ],
    [ [4 + N_1_i, 3 + N_1_j],  [6, 2] ],
    [ [0 + N_1_i, 4 + N_1_j],  [6, 2] ],
    [ [1 + N_1_i, 4 + N_1_j],  [6, 2] ],
    [ [2 + N_1_i, 4 + N_1_j],  [5, 1] ],
    [ [4 + N_1_i, 4 + N_1_j],  [6, 2] ],
    [ [0 + N_1_i, 5 + N_1_j],  [6, 0] ],
    [ [1 + N_1_i, 5 + N_1_j],  [6, 4] ],
    [ [3 + N_1_i, 5 + N_1_j],  [5, 0] ],
    [ [4 + N_1_i, 5 + N_1_j],  [6, 4] ],

    // T
    [ [0 + T_2_i, 0 + T_2_j],  [2, 0] ],
    [ [1 + T_2_i, 0 + T_2_j],  [4, 0] ],
    [ [2 + T_2_i, 0 + T_2_j],  [4, 0] ],
    [ [3 + T_2_i, 0 + T_2_j],  [4, 2] ],
    [ [0 + T_2_i, 1 + T_2_j],  [6, 0] ],
    [ [1 + T_2_i, 1 + T_2_j],  [4, 2] ],
    [ [1 + T_2_i, 2 + T_2_j],  [6, 2] ],
    [ [1 + T_2_i, 3 + T_2_j], [6, 2] ],
    [ [1 + T_2_i, 4 + T_2_j], [6, 2] ],
    [ [1 + T_2_i, 5 + T_2_j], [6, 0] ],
    [ [2 + T_2_i, 5 + T_2_j], [4, 6] ],
    [ [2 + T_2_i, 4 + T_2_j], [6, 2] ],
    [ [2 + T_2_i, 3 + T_2_j], [6, 2] ],
    [ [2 + T_2_i, 2 + T_2_j], [6, 2] ],
    [ [2 + T_2_i, 1 + T_2_j], [0, 2] ],
    [ [3 + T_2_i, 1 + T_2_j], [6, 4] ],

    // A
    [ [0 + A_2_i, 0 + A_2_j],  [2, 0] ],
    [ [1 + A_2_i, 0 + A_2_j],  [4, 0] ],
    [ [2 + A_2_i, 0 + A_2_j],  [4, 0] ],
    [ [3 + A_2_i, 0 + A_2_j],  [4, 2] ],
    [ [0 + A_2_i, 1 + A_2_j],  [6, 2] ],
    [ [1 + A_2_i, 1 + A_2_j],  [2, 0] ],
    [ [2 + A_2_i, 1 + A_2_j],  [4, 2] ],
    [ [3 + A_2_i, 1 + A_2_j],  [6, 2] ],
    [ [0 + A_2_i, 2 + A_2_j],  [6, 2] ],
    [ [1 + A_2_i, 2 + A_2_j],  [6, 0] ],
    [ [2 + A_2_i, 2 + A_2_j],  [4, 6] ],
    [ [3 + A_2_i, 2 + A_2_j],  [6, 2] ],
    [ [0 + A_2_i, 3 + A_2_j],  [6, 2] ],
    [ [1 + A_2_i, 3 + A_2_j],  [2, 0] ],
    [ [2 + A_2_i, 3 + A_2_j],  [4, 2] ],
    [ [3 + A_2_i, 3 + A_2_j],  [6, 2] ],
    [ [0 + A_2_i, 4 + A_2_j],  [6, 2] ],
    [ [1 + A_2_i, 4 + A_2_j],  [2, 6] ],
    [ [2 + A_2_i, 4 + A_2_j],  [6, 2] ],
    [ [3 + A_2_i, 4 + A_2_j],  [6, 2] ],
    [ [0 + A_2_i, 5 + A_2_j],  [6, 0] ],
    [ [1 + A_2_i, 5 + A_2_j],  [4, 6] ],
    [ [2 + A_2_i, 5 + A_2_j],  [6, 0] ],
    [ [3 + A_2_i, 5 + A_2_j],  [6, 4] ],

    // OPINIAO

    // O
    [ [0 + O_2_i, 0 + O_2_j],  [2, 0] ],
    [ [1 + O_2_i, 0 + O_2_j],  [4, 0] ],
    [ [2 + O_2_i, 0 + O_2_j],  [4, 0] ],
    [ [3 + O_2_i, 0 + O_2_j],  [2, 4] ],
    [ [0 + O_2_i, 1 + O_2_j],  [2, 6] ],
    [ [1 + O_2_i, 1 + O_2_j],  [2, 0] ],
    [ [2 + O_2_i, 1 + O_2_j],  [4, 2] ],
    [ [3 + O_2_i, 1 + O_2_j],  [6, 2] ],
    [ [0 + O_2_i, 2 + O_2_j],  [2, 6] ],
    [ [1 + O_2_i, 2 + O_2_j],  [2, 6] ],
    [ [2 + O_2_i, 2 + O_2_j],  [6, 2] ],
    [ [3 + O_2_i, 2 + O_2_j],  [6, 2] ],
    [ [0 + O_2_i, 3 + O_2_j],  [2, 6] ],
    [ [1 + O_2_i, 3 + O_2_j],  [2, 6] ],
    [ [2 + O_2_i, 3 + O_2_j],  [6, 2] ],
    [ [3 + O_2_i, 3 + O_2_j],  [6, 2] ],
    [ [0 + O_2_i, 4 + O_2_j],  [2, 6] ],
    [ [1 + O_2_i, 4 + O_2_j],  [0, 6] ],
    [ [2 + O_2_i, 4 + O_2_j],  [6, 4] ],
    [ [3 + O_2_i, 4 + O_2_j],  [6, 2] ],
    [ [0 + O_2_i, 5 + O_2_j],  [0, 6] ],
    [ [1 + O_2_i, 5 + O_2_j],  [4, 0] ],
    [ [2 + O_2_i, 5 + O_2_j],  [4, 0] ],
    [ [3 + O_2_i, 5 + O_2_j],  [6, 4] ],

    //P
    [ [0 + P_1_i, 0 + P_1_j],  [2, 0] ],
    [ [1 + P_1_i, 0 + P_1_j],  [4, 0] ],
    [ [2 + P_1_i, 0 + P_1_j],  [4, 0] ],
    [ [3 + P_1_i, 0 + P_1_j],  [2, 4] ],
    [ [0 + P_1_i, 1 + P_1_j],  [2, 6] ],
    [ [1 + P_1_i, 1 + P_1_j],  [2, 0] ],
    [ [2 + P_1_i, 1 + P_1_j],  [4, 2] ],
    [ [3 + P_1_i, 1 + P_1_j],  [6, 2] ],
    [ [0 + P_1_i, 2 + P_1_j],  [2, 6] ],
    [ [1 + P_1_i, 2 + P_1_j],  [0, 6] ],
    [ [2 + P_1_i, 2 + P_1_j],  [6, 4] ],
    [ [3 + P_1_i, 2 + P_1_j],  [6, 2] ],
    [ [0 + P_1_i, 3 + P_1_j],  [2, 6] ],
    [ [1 + P_1_i, 3 + P_1_j],  [0, 2] ],
    [ [2 + P_1_i, 3 + P_1_j],  [0, 4] ],
    [ [3 + P_1_i, 3 + P_1_j],  [6, 4] ],
    [ [0 + P_1_i, 4 + P_1_j],  [2, 6] ],
    [ [1 + P_1_i, 4 + P_1_j],  [6, 2] ],
    [ [0 + P_1_i, 5 + P_1_j],  [0, 6] ],
    [ [1 + P_1_i, 5 + P_1_j],  [4, 6] ],

    //I
    [ [0 + I_1_i, 0 + I_1_j],  [2, 0] ],
    [ [1 + I_1_i, 0 + I_1_j],  [2, 4] ],
    [ [0 + I_1_i, 1 + I_1_j],  [2, 6] ],
    [ [1 + I_1_i, 1 + I_1_j],  [2, 6] ],
    [ [0 + I_1_i, 2 + I_1_j],  [2, 6] ],
    [ [1 + I_1_i, 2 + I_1_j],  [2, 6] ],
    [ [0 + I_1_i, 3 + I_1_j],  [2, 6] ],
    [ [1 + I_1_i, 3 + I_1_j],  [2, 6] ],
    [ [0 + I_1_i, 4 + I_1_j],  [2, 6] ],
    [ [1 + I_1_i, 4 + I_1_j],  [2, 6] ],
    [ [0 + I_1_i, 5 + I_1_j],  [0, 6] ],
    [ [1 + I_1_i, 5 + I_1_j],  [4, 6] ],

    //N
    [ [0 + N_3_i, 0 + N_3_j],  [0, 2] ],
    [ [1 + N_3_i, 0 + N_3_j],  [4, 1] ],
    [ [3 + N_3_i, 0 + N_3_j],  [0, 2] ],
    [ [4 + N_3_i, 0 + N_3_j],  [4, 2] ],
    [ [0 + N_3_i, 1 + N_3_j],  [6, 2] ],
    [ [2 + N_3_i, 1 + N_3_j],  [5, 1] ],
    [ [3 + N_3_i, 1 + N_3_j],  [6, 2] ],
    [ [4 + N_3_i, 1 + N_3_j],  [6, 2] ],
    [ [0 + N_3_i, 2 + N_3_j],  [6, 2] ],
    [ [3 + N_3_i, 2 + N_3_j],  [6, 5] ],
    [ [4 + N_3_i, 2 + N_3_j],  [6, 2] ],
    [ [0 + N_3_i, 3 + N_3_j],  [6, 2] ],
    [ [1 + N_3_i, 3 + N_3_j],  [1, 2] ],
    [ [4 + N_3_i, 3 + N_3_j],  [6, 2] ],
    [ [0 + N_3_i, 4 + N_3_j],  [6, 2] ],
    [ [1 + N_3_i, 4 + N_3_j],  [6, 2] ],
    [ [2 + N_3_i, 4 + N_3_j],  [5, 1] ],
    [ [4 + N_3_i, 4 + N_3_j],  [6, 2] ],
    [ [0 + N_3_i, 5 + N_3_j],  [6, 0] ],
    [ [1 + N_3_i, 5 + N_3_j],  [6, 4] ],
    [ [3 + N_3_i, 5 + N_3_j],  [5, 0] ],
    [ [4 + N_3_i, 5 + N_3_j],  [6, 4] ],

    //I
    [ [0 + I_2_i, 0 + I_2_j],  [2, 0] ],
    [ [1 + I_2_i, 0 + I_2_j],  [2, 4] ],
    [ [0 + I_2_i, 1 + I_2_j],  [2, 6] ],
    [ [1 + I_2_i, 1 + I_2_j],  [2, 6] ],
    [ [0 + I_2_i, 2 + I_2_j],  [2, 6] ],
    [ [1 + I_2_i, 2 + I_2_j],  [2, 6] ],
    [ [0 + I_2_i, 3 + I_2_j],  [2, 6] ],
    [ [1 + I_2_i, 3 + I_2_j],  [2, 6] ],
    [ [0 + I_2_i, 4 + I_2_j],  [2, 6] ],
    [ [1 + I_2_i, 4 + I_2_j],  [2, 6] ],
    [ [0 + I_2_i, 5 + I_2_j],  [0, 6] ],
    [ [1 + I_2_i, 5 + I_2_j],  [4, 6] ],

    // A
    [ [0 + A_3_i, 0 + A_3_j],  [2, 0] ],
    [ [1 + A_3_i, 0 + A_3_j],  [4, 0] ],
    [ [2 + A_3_i, 0 + A_3_j],  [4, 0] ],
    [ [3 + A_3_i, 0 + A_3_j],  [4, 2] ],
    [ [0 + A_3_i, 1 + A_3_j],  [6, 2] ],
    [ [1 + A_3_i, 1 + A_3_j],  [2, 0] ],
    [ [2 + A_3_i, 1 + A_3_j],  [4, 2] ],
    [ [3 + A_3_i, 1 + A_3_j],  [6, 2] ],
    [ [0 + A_3_i, 2 + A_3_j],  [6, 2] ],
    [ [1 + A_3_i, 2 + A_3_j],  [6, 0] ],
    [ [2 + A_3_i, 2 + A_3_j],  [4, 6] ],
    [ [3 + A_3_i, 2 + A_3_j],  [6, 2] ],
    [ [0 + A_3_i, 3 + A_3_j],  [6, 2] ],
    [ [1 + A_3_i, 3 + A_3_j],  [2, 0] ],
    [ [2 + A_3_i, 3 + A_3_j],  [4, 2] ],
    [ [3 + A_3_i, 3 + A_3_j],  [6, 2] ],
    [ [0 + A_3_i, 4 + A_3_j],  [6, 2] ],
    [ [1 + A_3_i, 4 + A_3_j],  [2, 6] ],
    [ [2 + A_3_i, 4 + A_3_j],  [6, 2] ],
    [ [3 + A_3_i, 4 + A_3_j],  [6, 2] ],
    [ [0 + A_3_i, 5 + A_3_j],  [6, 0] ],
    [ [1 + A_3_i, 5 + A_3_j],  [4, 6] ],
    [ [2 + A_3_i, 5 + A_3_j],  [6, 0] ],
    [ [3 + A_3_i, 5 + A_3_j],  [6, 4] ],

    // O
    [ [0 + O_3_i, 0 + O_3_j],  [2, 0] ],
    [ [1 + O_3_i, 0 + O_3_j],  [4, 0] ],
    [ [2 + O_3_i, 0 + O_3_j],  [4, 0] ],
    [ [3 + O_3_i, 0 + O_3_j],  [2, 4] ],
    [ [0 + O_3_i, 1 + O_3_j],  [2, 6] ],
    [ [1 + O_3_i, 1 + O_3_j],  [2, 0] ],
    [ [2 + O_3_i, 1 + O_3_j],  [4, 2] ],
    [ [3 + O_3_i, 1 + O_3_j],  [6, 2] ],
    [ [0 + O_3_i, 2 + O_3_j],  [2, 6] ],
    [ [1 + O_3_i, 2 + O_3_j],  [2, 6] ],
    [ [2 + O_3_i, 2 + O_3_j],  [6, 2] ],
    [ [3 + O_3_i, 2 + O_3_j],  [6, 2] ],
    [ [0 + O_3_i, 3 + O_3_j],  [2, 6] ],
    [ [1 + O_3_i, 3 + O_3_j],  [2, 6] ],
    [ [2 + O_3_i, 3 + O_3_j],  [6, 2] ],
    [ [3 + O_3_i, 3 + O_3_j],  [6, 2] ],
    [ [0 + O_3_i, 4 + O_3_j],  [2, 6] ],
    [ [1 + O_3_i, 4 + O_3_j],  [0, 6] ],
    [ [2 + O_3_i, 4 + O_3_j],  [6, 4] ],
    [ [3 + O_3_i, 4 + O_3_j],  [6, 2] ],
    [ [0 + O_3_i, 5 + O_3_j],  [0, 6] ],
    [ [1 + O_3_i, 5 + O_3_j],  [4, 0] ],
    [ [2 + O_3_i, 5 + O_3_j],  [4, 0] ],
    [ [3 + O_3_i, 5 + O_3_j],  [6, 4] ]

]

const posicoes_terceira = [

    // [[i,j], [a1, a2]]

    // SOBRE

    // S
    [ [0 + S_1_i, 0 + S_1_j],  [2, 0] ],
    [ [1 + S_1_i, 0 + S_1_j],  [0, 4] ],
    [ [2 + S_1_i, 0 + S_1_j],  [4, 0] ],
    [ [3 + S_1_i, 0 + S_1_j],  [2, 4] ],
    [ [0 + S_1_i, 1 + S_1_j],  [6, 2] ],
    [ [1 + S_1_i, 1 + S_1_j],  [0, 2] ],
    [ [2 + S_1_i, 1 + S_1_j],  [4, 0] ],
    [ [3 + S_1_i, 1 + S_1_j],  [4, 6] ],
    [ [0 + S_1_i, 2 + S_1_j],  [6, 2] ],
    [ [1 + S_1_i, 2 + S_1_j],  [6, 0] ],
    [ [2 + S_1_i, 2 + S_1_j],  [4, 0] ],
    [ [3 + S_1_i, 2 + S_1_j],  [2, 4] ],
    [ [0 + S_1_i, 3 + S_1_j],  [0, 6] ],
    [ [1 + S_1_i, 3 + S_1_j],  [4, 0] ],
    [ [2 + S_1_i, 3 + S_1_j],  [2, 4] ],
    [ [3 + S_1_i, 3 + S_1_j],  [6, 2] ],
    [ [0 + S_1_i, 4 + S_1_j],  [2, 0] ],
    [ [1 + S_1_i, 4 + S_1_j],  [4, 0] ],
    [ [2 + S_1_i, 4 + S_1_j],  [4, 6] ],
    [ [3 + S_1_i, 4 + S_1_j],  [6, 2] ],
    [ [0 + S_1_i, 5 + S_1_j],  [0, 6] ],
    [ [1 + S_1_i, 5 + S_1_j],  [4, 0] ],
    [ [2 + S_1_i, 5 + S_1_j],  [4, 0] ],
    [ [3 + S_1_i, 5 + S_1_j],  [6, 4] ],

    // O
    [ [0 + O_4_i, 0 + O_4_j],  [2, 0] ],
    [ [1 + O_4_i, 0 + O_4_j],  [4, 0] ],
    [ [2 + O_4_i, 0 + O_4_j],  [4, 0] ],
    [ [3 + O_4_i, 0 + O_4_j],  [2, 4] ],
    [ [0 + O_4_i, 1 + O_4_j],  [2, 6] ],
    [ [1 + O_4_i, 1 + O_4_j],  [2, 0] ],
    [ [2 + O_4_i, 1 + O_4_j],  [4, 2] ],
    [ [3 + O_4_i, 1 + O_4_j],  [6, 2] ],
    [ [0 + O_4_i, 2 + O_4_j],  [2, 6] ],
    [ [1 + O_4_i, 2 + O_4_j],  [2, 6] ],
    [ [2 + O_4_i, 2 + O_4_j],  [6, 2] ],
    [ [3 + O_4_i, 2 + O_4_j],  [6, 2] ],
    [ [0 + O_4_i, 3 + O_4_j],  [2, 6] ],
    [ [1 + O_4_i, 3 + O_4_j],  [2, 6] ],
    [ [2 + O_4_i, 3 + O_4_j],  [6, 2] ],
    [ [3 + O_4_i, 3 + O_4_j],  [6, 2] ],
    [ [0 + O_4_i, 4 + O_4_j],  [2, 6] ],
    [ [1 + O_4_i, 4 + O_4_j],  [0, 6] ],
    [ [2 + O_4_i, 4 + O_4_j],  [6, 4] ],
    [ [3 + O_4_i, 4 + O_4_j],  [6, 2] ],
    [ [0 + O_4_i, 5 + O_4_j],  [0, 6] ],
    [ [1 + O_4_i, 5 + O_4_j],  [4, 0] ],
    [ [2 + O_4_i, 5 + O_4_j],  [4, 0] ],
    [ [3 + O_4_i, 5 + O_4_j],  [6, 4] ],

    //B
    [ [0 + B_1_i, 0 + B_1_j],  [2, 0] ],
    [ [1 + B_1_i, 0 + B_1_j],  [4, 0] ],
    [ [2 + B_1_i, 0 + B_1_j],  [4, 0] ],
    [ [3 + B_1_i, 0 + B_1_j],  [2, 4] ],
    [ [0 + B_1_i, 1 + B_1_j],  [2, 6] ],
    [ [1 + B_1_i, 1 + B_1_j],  [2, 0] ],
    [ [2 + B_1_i, 1 + B_1_j],  [4, 2] ],
    [ [3 + B_1_i, 1 + B_1_j],  [6, 2] ],
    [ [0 + B_1_i, 2 + B_1_j],  [2, 6] ],
    [ [1 + B_1_i, 2 + B_1_j],  [6, 0] ],
    [ [2 + B_1_i, 2 + B_1_j],  [4, 6] ],
    [ [3 + B_1_i, 2 + B_1_j],  [6, 2] ],
    [ [0 + B_1_i, 3 + B_1_j],  [2, 6] ],
    [ [1 + B_1_i, 3 + B_1_j],  [0, 2] ],
    [ [2 + B_1_i, 3 + B_1_j],  [2, 4] ],
    [ [3 + B_1_i, 3 + B_1_j],  [6, 2] ],
    [ [0 + B_1_i, 4 + B_1_j],  [2, 6] ],
    [ [1 + B_1_i, 4 + B_1_j],  [0, 6] ],
    [ [2 + B_1_i, 4 + B_1_j],  [6, 4] ],
    [ [3 + B_1_i, 4 + B_1_j],  [6, 2] ],
    [ [0 + B_1_i, 5 + B_1_j],  [0, 6] ],
    [ [1 + B_1_i, 5 + B_1_j],  [4, 0] ],
    [ [2 + B_1_i, 5 + B_1_j],  [4, 0] ],
    [ [3 + B_1_i, 5 + B_1_j],  [6, 4] ],

    // R
    [ [0 + R_1_i, 0 + R_1_j],  [2, 0] ],
    [ [1 + R_1_i, 0 + R_1_j],  [4, 0] ],
    [ [2 + R_1_i, 0 + R_1_j],  [4, 0] ],
    [ [3 + R_1_i, 0 + R_1_j],  [2, 4] ],
    [ [0 + R_1_i, 1 + R_1_j],  [2, 6] ],
    [ [1 + R_1_i, 1 + R_1_j],  [2, 0] ],
    [ [2 + R_1_i, 1 + R_1_j],  [4, 2] ],
    [ [3 + R_1_i, 1 + R_1_j],  [6, 2] ],
    [ [0 + R_1_i, 2 + R_1_j],  [2, 6] ],
    [ [1 + R_1_i, 2 + R_1_j],  [6, 0] ],
    [ [2 + R_1_i, 2 + R_1_j],  [4, 6] ],
    [ [3 + R_1_i, 2 + R_1_j],  [6, 2] ],
    [ [0 + R_1_i, 3 + R_1_j],  [2, 6] ],
    [ [2 + R_1_i, 3 + R_1_j],  [0, 1] ],
    [ [3 + R_1_i, 3 + R_1_j],  [4, 6] ],
    [ [0 + R_1_i, 4 + R_1_j],  [2, 6] ],
    [ [1 + R_1_i, 4 + R_1_j],  [2, 1] ],
    [ [3 + R_1_i, 4 + R_1_j],  [5, 2] ],
    [ [0 + R_1_i, 5 + R_1_j],  [0, 6] ],
    [ [1 + R_1_i, 5 + R_1_j],  [6, 4] ],
    [ [2 + R_1_i, 5 + R_1_j],  [0, 5] ],
    [ [3 + R_1_i, 5 + R_1_j],  [6, 4] ],  

    // E
    [ [0 + E_3_i, 0 + E_3_j],  [2, 0] ],
    [ [1 + E_3_i, 0 + E_3_j],  [4, 0] ],
    [ [2 + E_3_i, 0 + E_3_j],  [4, 0] ],
    [ [3 + E_3_i, 0 + E_3_j],  [2, 4] ],
    [ [0 + E_3_i, 1 + E_3_j],  [2, 6] ],
    [ [1 + E_3_i, 1 + E_3_j],  [2, 0] ],
    [ [2 + E_3_i, 1 + E_3_j],  [4, 0] ],
    [ [3 + E_3_i, 1 + E_3_j],  [6, 4] ],
    [ [0 + E_3_i, 2 + E_3_j],  [2, 6] ],
    [ [1 + E_3_i, 2 + E_3_j],  [6, 0] ],
    [ [2 + E_3_i, 2 + E_3_j],  [4, 2] ],
    [ [0 + E_3_i, 3 + E_3_j],  [2, 6] ],
    [ [1 + E_3_i, 3 + E_3_j],  [2, 0] ],
    [ [2 + E_3_i, 3 + E_3_j],  [4, 6] ],
    [ [0 + E_3_i, 4 + E_3_j],  [2, 6] ],
    [ [1 + E_3_i, 4 + E_3_j],  [6, 0] ],
    [ [2 + E_3_i, 4 + E_3_j],  [4, 0] ],
    [ [3 + E_3_i, 4 + E_3_j],  [2, 4] ],
    [ [0 + E_3_i, 5 + E_3_j],  [0, 6] ],
    [ [1 + E_3_i, 5 + E_3_j],  [4, 0] ],
    [ [2 + E_3_i, 5 + E_3_j],  [4, 0] ],
    [ [3 + E_3_i, 5 + E_3_j],  [6, 4] ],

    // TANTA

    // T
    [ [0 + T_1_i, 0 + T_1_j],  [2, 0] ],
    [ [1 + T_1_i, 0 + T_1_j],  [4, 0] ],
    [ [2 + T_1_i, 0 + T_1_j],  [4, 0] ],
    [ [3 + T_1_i, 0 + T_1_j],  [4, 2] ],
    [ [0 + T_1_i, 1 + T_1_j],  [6, 0] ],
    [ [1 + T_1_i, 1 + T_1_j],  [4, 2] ],
    [ [1 + T_1_i, 2 + T_1_j],  [6, 2] ],
    [ [1 + T_1_i, 3 + T_1_j], [6, 2] ],
    [ [1 + T_1_i, 4 + T_1_j], [6, 2] ],
    [ [1 + T_1_i, 5 + T_1_j], [6, 0] ],
    [ [2 + T_1_i, 5 + T_1_j], [4, 6] ],
    [ [2 + T_1_i, 4 + T_1_j], [6, 2] ],
    [ [2 + T_1_i, 3 + T_1_j], [6, 2] ],
    [ [2 + T_1_i, 2 + T_1_j], [6, 2] ],
    [ [2 + T_1_i, 1 + T_1_j], [0, 2] ],
    [ [3 + T_1_i, 1 + T_1_j], [6, 4] ],

    // A
    [ [0 + A_1_i, 0 + A_1_j],  [2, 0] ],
    [ [1 + A_1_i, 0 + A_1_j],  [4, 0] ],
    [ [2 + A_1_i, 0 + A_1_j],  [4, 0] ],
    [ [3 + A_1_i, 0 + A_1_j],  [4, 2] ],
    [ [0 + A_1_i, 1 + A_1_j],  [6, 2] ],
    [ [1 + A_1_i, 1 + A_1_j],  [2, 0] ],
    [ [2 + A_1_i, 1 + A_1_j],  [4, 2] ],
    [ [3 + A_1_i, 1 + A_1_j],  [6, 2] ],
    [ [0 + A_1_i, 2 + A_1_j],  [6, 2] ],
    [ [1 + A_1_i, 2 + A_1_j],  [6, 0] ],
    [ [2 + A_1_i, 2 + A_1_j],  [4, 6] ],
    [ [3 + A_1_i, 2 + A_1_j],  [6, 2] ],
    [ [0 + A_1_i, 3 + A_1_j],  [6, 2] ],
    [ [1 + A_1_i, 3 + A_1_j],  [2, 0] ],
    [ [2 + A_1_i, 3 + A_1_j],  [4, 2] ],
    [ [3 + A_1_i, 3 + A_1_j],  [6, 2] ],
    [ [0 + A_1_i, 4 + A_1_j],  [6, 2] ],
    [ [1 + A_1_i, 4 + A_1_j],  [2, 6] ],
    [ [2 + A_1_i, 4 + A_1_j],  [6, 2] ],
    [ [3 + A_1_i, 4 + A_1_j],  [6, 2] ],
    [ [0 + A_1_i, 5 + A_1_j],  [6, 0] ],
    [ [1 + A_1_i, 5 + A_1_j],  [4, 6] ],
    [ [2 + A_1_i, 5 + A_1_j],  [6, 0] ],
    [ [3 + A_1_i, 5 + A_1_j],  [6, 4] ],

    // N
    [ [0 + N_1_i, 0 + N_1_j],  [0, 2] ],
    [ [1 + N_1_i, 0 + N_1_j],  [4, 1] ],
    [ [3 + N_1_i, 0 + N_1_j],  [0, 2] ],
    [ [4 + N_1_i, 0 + N_1_j],  [4, 2] ],
    [ [0 + N_1_i, 1 + N_1_j],  [6, 2] ],
    [ [2 + N_1_i, 1 + N_1_j],  [5, 1] ],
    [ [3 + N_1_i, 1 + N_1_j],  [6, 2] ],
    [ [4 + N_1_i, 1 + N_1_j],  [6, 2] ],
    [ [0 + N_1_i, 2 + N_1_j],  [6, 2] ],
    [ [3 + N_1_i, 2 + N_1_j],  [6, 5] ],
    [ [4 + N_1_i, 2 + N_1_j],  [6, 2] ],
    [ [0 + N_1_i, 3 + N_1_j],  [6, 2] ],
    [ [1 + N_1_i, 3 + N_1_j],  [1, 2] ],
    [ [4 + N_1_i, 3 + N_1_j],  [6, 2] ],
    [ [0 + N_1_i, 4 + N_1_j],  [6, 2] ],
    [ [1 + N_1_i, 4 + N_1_j],  [6, 2] ],
    [ [2 + N_1_i, 4 + N_1_j],  [5, 1] ],
    [ [4 + N_1_i, 4 + N_1_j],  [6, 2] ],
    [ [0 + N_1_i, 5 + N_1_j],  [6, 0] ],
    [ [1 + N_1_i, 5 + N_1_j],  [6, 4] ],
    [ [3 + N_1_i, 5 + N_1_j],  [5, 0] ],
    [ [4 + N_1_i, 5 + N_1_j],  [6, 4] ],

    // T
    [ [0 + T_2_i, 0 + T_2_j],  [2, 0] ],
    [ [1 + T_2_i, 0 + T_2_j],  [4, 0] ],
    [ [2 + T_2_i, 0 + T_2_j],  [4, 0] ],
    [ [3 + T_2_i, 0 + T_2_j],  [4, 2] ],
    [ [0 + T_2_i, 1 + T_2_j],  [6, 0] ],
    [ [1 + T_2_i, 1 + T_2_j],  [4, 2] ],
    [ [1 + T_2_i, 2 + T_2_j],  [6, 2] ],
    [ [1 + T_2_i, 3 + T_2_j], [6, 2] ],
    [ [1 + T_2_i, 4 + T_2_j], [6, 2] ],
    [ [1 + T_2_i, 5 + T_2_j], [6, 0] ],
    [ [2 + T_2_i, 5 + T_2_j], [4, 6] ],
    [ [2 + T_2_i, 4 + T_2_j], [6, 2] ],
    [ [2 + T_2_i, 3 + T_2_j], [6, 2] ],
    [ [2 + T_2_i, 2 + T_2_j], [6, 2] ],
    [ [2 + T_2_i, 1 + T_2_j], [0, 2] ],
    [ [3 + T_2_i, 1 + T_2_j], [6, 4] ],

    // A
    [ [0 + A_2_i, 0 + A_2_j],  [2, 0] ],
    [ [1 + A_2_i, 0 + A_2_j],  [4, 0] ],
    [ [2 + A_2_i, 0 + A_2_j],  [4, 0] ],
    [ [3 + A_2_i, 0 + A_2_j],  [4, 2] ],
    [ [0 + A_2_i, 1 + A_2_j],  [6, 2] ],
    [ [1 + A_2_i, 1 + A_2_j],  [2, 0] ],
    [ [2 + A_2_i, 1 + A_2_j],  [4, 2] ],
    [ [3 + A_2_i, 1 + A_2_j],  [6, 2] ],
    [ [0 + A_2_i, 2 + A_2_j],  [6, 2] ],
    [ [1 + A_2_i, 2 + A_2_j],  [6, 0] ],
    [ [2 + A_2_i, 2 + A_2_j],  [4, 6] ],
    [ [3 + A_2_i, 2 + A_2_j],  [6, 2] ],
    [ [0 + A_2_i, 3 + A_2_j],  [6, 2] ],
    [ [1 + A_2_i, 3 + A_2_j],  [2, 0] ],
    [ [2 + A_2_i, 3 + A_2_j],  [4, 2] ],
    [ [3 + A_2_i, 3 + A_2_j],  [6, 2] ],
    [ [0 + A_2_i, 4 + A_2_j],  [6, 2] ],
    [ [1 + A_2_i, 4 + A_2_j],  [2, 6] ],
    [ [2 + A_2_i, 4 + A_2_j],  [6, 2] ],
    [ [3 + A_2_i, 4 + A_2_j],  [6, 2] ],
    [ [0 + A_2_i, 5 + A_2_j],  [6, 0] ],
    [ [1 + A_2_i, 5 + A_2_j],  [4, 6] ],
    [ [2 + A_2_i, 5 + A_2_j],  [6, 0] ],
    [ [3 + A_2_i, 5 + A_2_j],  [6, 4] ],

    // COISA

    [ [0 + C_2_i, 0 + C_2_j],  [2, 0] ],
    [ [1 + C_2_i, 0 + C_2_j],  [4, 0] ],
    [ [2 + C_2_i, 0 + C_2_j],  [4, 0] ],
    [ [3 + C_2_i, 0 + C_2_j],  [2, 4] ],
    [ [0 + C_2_i, 1 + C_2_j],  [2, 6] ],
    [ [1 + C_2_i, 1 + C_2_j],  [2, 0] ],
    [ [2 + C_2_i, 1 + C_2_j],  [4, 0] ],
    [ [3 + C_2_i, 1 + C_2_j],  [6, 4] ],
    [ [0 + C_2_i, 2 + C_2_j],  [2, 6] ],
    [ [1 + C_2_i, 2 + C_2_j],  [2, 6] ],
    [ [0 + C_2_i, 3 + C_2_j],  [2, 6] ],
    [ [1 + C_2_i, 3 + C_2_j],  [2, 6] ],
    [ [0 + C_2_i, 4 + C_2_j],  [2, 6] ],
    [ [1 + C_2_i, 4 + C_2_j],  [6, 0] ],
    [ [2 + C_2_i, 4 + C_2_j],  [4, 0] ],
    [ [3 + C_2_i, 4 + C_2_j],  [2, 4] ],
    [ [0 + C_2_i, 5 + C_2_j],  [0, 6] ],
    [ [1 + C_2_i, 5 + C_2_j],  [4, 0] ],
    [ [2 + C_2_i, 5 + C_2_j],  [4, 0] ],
    [ [3 + C_2_i, 5 + C_2_j],  [6, 4] ],

    // O
    [ [0 + O_5_i, 0 + O_5_j],  [2, 0] ],
    [ [1 + O_5_i, 0 + O_5_j],  [4, 0] ],
    [ [2 + O_5_i, 0 + O_5_j],  [4, 0] ],
    [ [3 + O_5_i, 0 + O_5_j],  [2, 4] ],
    [ [0 + O_5_i, 1 + O_5_j],  [2, 6] ],
    [ [1 + O_5_i, 1 + O_5_j],  [2, 0] ],
    [ [2 + O_5_i, 1 + O_5_j],  [4, 2] ],
    [ [3 + O_5_i, 1 + O_5_j],  [6, 2] ],
    [ [0 + O_5_i, 2 + O_5_j],  [2, 6] ],
    [ [1 + O_5_i, 2 + O_5_j],  [2, 6] ],
    [ [2 + O_5_i, 2 + O_5_j],  [6, 2] ],
    [ [3 + O_5_i, 2 + O_5_j],  [6, 2] ],
    [ [0 + O_5_i, 3 + O_5_j],  [2, 6] ],
    [ [1 + O_5_i, 3 + O_5_j],  [2, 6] ],
    [ [2 + O_5_i, 3 + O_5_j],  [6, 2] ],
    [ [3 + O_5_i, 3 + O_5_j],  [6, 2] ],
    [ [0 + O_5_i, 4 + O_5_j],  [2, 6] ],
    [ [1 + O_5_i, 4 + O_5_j],  [0, 6] ],
    [ [2 + O_5_i, 4 + O_5_j],  [6, 4] ],
    [ [3 + O_5_i, 4 + O_5_j],  [6, 2] ],
    [ [0 + O_5_i, 5 + O_5_j],  [0, 6] ],
    [ [1 + O_5_i, 5 + O_5_j],  [4, 0] ],
    [ [2 + O_5_i, 5 + O_5_j],  [4, 0] ],
    [ [3 + O_5_i, 5 + O_5_j],  [6, 4] ],

    //I
    [ [0 + I_3_i, 0 + I_3_j],  [2, 0] ],
    [ [1 + I_3_i, 0 + I_3_j],  [2, 4] ],
    [ [0 + I_3_i, 1 + I_3_j],  [2, 6] ],
    [ [1 + I_3_i, 1 + I_3_j],  [2, 6] ],
    [ [0 + I_3_i, 2 + I_3_j],  [2, 6] ],
    [ [1 + I_3_i, 2 + I_3_j],  [2, 6] ],
    [ [0 + I_3_i, 3 + I_3_j],  [2, 6] ],
    [ [1 + I_3_i, 3 + I_3_j],  [2, 6] ],
    [ [0 + I_3_i, 4 + I_3_j],  [2, 6] ],
    [ [1 + I_3_i, 4 + I_3_j],  [2, 6] ],
    [ [0 + I_3_i, 5 + I_3_j],  [0, 6] ],
    [ [1 + I_3_i, 5 + I_3_j],  [4, 6] ],

    // S
    [ [0 + S_2_i, 0 + S_2_j],  [2, 0] ],
    [ [1 + S_2_i, 0 + S_2_j],  [0, 4] ],
    [ [2 + S_2_i, 0 + S_2_j],  [4, 0] ],
    [ [3 + S_2_i, 0 + S_2_j],  [2, 4] ],
    [ [0 + S_2_i, 1 + S_2_j],  [6, 2] ],
    [ [1 + S_2_i, 1 + S_2_j],  [0, 2] ],
    [ [2 + S_2_i, 1 + S_2_j],  [4, 0] ],
    [ [3 + S_2_i, 1 + S_2_j],  [4, 6] ],
    [ [0 + S_2_i, 2 + S_2_j],  [6, 2] ],
    [ [1 + S_2_i, 2 + S_2_j],  [6, 0] ],
    [ [2 + S_2_i, 2 + S_2_j],  [4, 0] ],
    [ [3 + S_2_i, 2 + S_2_j],  [2, 4] ],
    [ [0 + S_2_i, 3 + S_2_j],  [0, 6] ],
    [ [1 + S_2_i, 3 + S_2_j],  [4, 0] ],
    [ [2 + S_2_i, 3 + S_2_j],  [2, 4] ],
    [ [3 + S_2_i, 3 + S_2_j],  [6, 2] ],
    [ [0 + S_2_i, 4 + S_2_j],  [2, 0] ],
    [ [1 + S_2_i, 4 + S_2_j],  [4, 0] ],
    [ [2 + S_2_i, 4 + S_2_j],  [4, 6] ],
    [ [3 + S_2_i, 4 + S_2_j],  [6, 2] ],
    [ [0 + S_2_i, 5 + S_2_j],  [0, 6] ],
    [ [1 + S_2_i, 5 + S_2_j],  [4, 0] ],
    [ [2 + S_2_i, 5 + S_2_j],  [4, 0] ],
    [ [3 + S_2_i, 5 + S_2_j],  [6, 4] ],

    // A
    [ [0 + A_4_i, 0 + A_4_j],  [2, 0] ],
    [ [1 + A_4_i, 0 + A_4_j],  [4, 0] ],
    [ [2 + A_4_i, 0 + A_4_j],  [4, 0] ],
    [ [3 + A_4_i, 0 + A_4_j],  [4, 2] ],
    [ [0 + A_4_i, 1 + A_4_j],  [6, 2] ],
    [ [1 + A_4_i, 1 + A_4_j],  [2, 0] ],
    [ [2 + A_4_i, 1 + A_4_j],  [4, 2] ],
    [ [3 + A_4_i, 1 + A_4_j],  [6, 2] ],
    [ [0 + A_4_i, 2 + A_4_j],  [6, 2] ],
    [ [1 + A_4_i, 2 + A_4_j],  [6, 0] ],
    [ [2 + A_4_i, 2 + A_4_j],  [4, 6] ],
    [ [3 + A_4_i, 2 + A_4_j],  [6, 2] ],
    [ [0 + A_4_i, 3 + A_4_j],  [6, 2] ],
    [ [1 + A_4_i, 3 + A_4_j],  [2, 0] ],
    [ [2 + A_4_i, 3 + A_4_j],  [4, 2] ],
    [ [3 + A_4_i, 3 + A_4_j],  [6, 2] ],
    [ [0 + A_4_i, 4 + A_4_j],  [6, 2] ],
    [ [1 + A_4_i, 4 + A_4_j],  [2, 6] ],
    [ [2 + A_4_i, 4 + A_4_j],  [6, 2] ],
    [ [3 + A_4_i, 4 + A_4_j],  [6, 2] ],
    [ [0 + A_4_i, 5 + A_4_j],  [6, 0] ],
    [ [1 + A_4_i, 5 + A_4_j],  [4, 6] ],
    [ [2 + A_4_i, 5 + A_4_j],  [6, 0] ],
    [ [3 + A_4_i, 5 + A_4_j],  [6, 4] ],

    // ...
    [ [0 + ret_i, 0 + ret_j],  [2, 0] ],
    [ [1 + ret_i, 0 + ret_j],  [2, 4] ],
    [ [0 + ret_i, 1 + ret_j],  [0, 6] ],
    [ [1 + ret_i, 1 + ret_j],  [6, 4] ],

    [ [2 + ret_i, 0 + ret_j],  [2, 0] ],
    [ [3 + ret_i, 0 + ret_j],  [2, 4] ],
    [ [2 + ret_i, 1 + ret_j],  [0, 6] ],
    [ [3 + ret_i, 1 + ret_j],  [6, 4] ],
    
    [ [4 + ret_i, 0 + ret_j],  [2, 0] ],
    [ [5 + ret_i, 0 + ret_j],  [2, 4] ],
    [ [4 + ret_i, 1 + ret_j],  [0, 6] ],
    [ [5 + ret_i, 1 + ret_j],  [6, 4] ]

]

posicoes_primeira.forEach(elemento => {

    const [pos, ang] = elemento;

    const [i,j] = pos;

    const n = j * nrow + i;

    //console.log(n);

    nodes[n].angulos.primeira = ang;

})

posicoes_segunda.forEach(elemento => {

    const [pos, ang] = elemento;

    const [i,j] = pos;

    const n = j * nrow + i;

    //console.log(n);

    nodes[n].angulos.segunda = ang;

});

posicoes_terceira.forEach(elemento => {

    //console.log(elemento);

    const [pos, ang] = elemento;

    const [i,j] = pos;

    const n = j * nrow + i;

    //console.log(n);

    nodes[n].angulos.terceira = ang;

});

ctx.strokeStyle = 'yellow';
ctx.fillStyle = 'yellow';

const teta = Math.PI / 4;



//console.log(nodes.map(d => [d.a1, d.a2]));

function pega_valor_futuro(target, estado) {

    let valores = [target.a1, target.a2];

    let n = target.n;

    //let par = n % 3;

    if (target.angulos[estado]) {

        valores = target.angulos[estado];
        //if (par) valores[0] = valores[0] - 8;

    }

    //console.log(estado, target.angulos[estado], valores[0], valores[1]);

    return valores;

}

function pega_valor_futuro_color(target, estado) {
    
    if (target.angulos[estado]) {

        return 'yellow'
        //return gap;

    } else return dimcolor;

}


function render() {

    // clear
    ctx.fillStyle = '#333';
    ctx.fillRect(0, 0, w, h);

    nodes.forEach(point => {

        const { n, x, y, a1, a2, l, color } = point;

        //if (n == 175) console.log(a1, a2);

        ctx.strokeStyle = color;
        ctx.fillStyle = color;
    
        ctx.beginPath();
        ctx.arc(x, y, 5, 0, Math.PI*2);
        ctx.closePath();
        ctx.stroke();
        ctx.fill();

        //ctx.globalAlpha = alpha;
    
        ctx.save();
        ctx.translate(x,y);
        ctx.rotate(teta * a1);
        ctx.beginPath();
        ctx.moveTo(0,0);
        ctx.lineTo(l,0);
        ctx.closePath();
        ctx.stroke();
        ctx.restore();

        ctx.save();
        ctx.translate(x,y);
        ctx.rotate(teta * a2);
        ctx.beginPath();
        ctx.moveTo(0,0);
        ctx.lineTo(l,0);
        ctx.closePath();
        ctx.stroke();
        ctx.restore();

        //ctx.globalAlpha = 1;
    
    })

}

render();

function renderiza_estado_inicial() {
    //seta estado inicial
    palette = ['#ff0000','#ffa500','#ffff00','#008000','#0000ff','#4b0082','#ee82ee'];

    //palette = ['#c0a8ff', '#c0ffa8', '#ffc0a8', '#ffa8c0', '#c0d8ff', '#f0ffa8'];

    nodes.forEach(point => {
        point.a1 = point.angulos.inicial[0];
        point.a2 = point.angulos.inicial[1];
        point.color = palette[Math.floor(Math.random() * palette.length)];
    });

    render();

}

//renderiza_estado_inicial();


gsap.timeline()
    .to(nodes, {

        delay: 2,
        duration: 2.5,
        color: (i, target) => target.color_random,
        a1 : (i, target) => target.angulos.inicial[0],
        a2 : (i, target) => target.angulos.inicial[1],
        onUpdate: render,
        ease: 'sine'

    })
    .to(nodes, {

        duration: 2,
        delay : (i, target) => 1 + ( (nrow + ncol) - (target.i + target.j) ) * .05,
        a1: 2,
        a2: 0,
        color: 'green',
        onUpdate: render,
        ease: 'sine'

    })
    .to(nodes, {

        duration: 2,
        delay : (i, target) => (target.i + target.j) * .05,
        a2: 8,
        color: 'cyan',
        onUpdate: render,
        ease: 'sine'

    })
    .to(nodes, {

        duration: 1,
        delay : (i, target) => (target.i + target.j) * .05,
        a1: 4,
        a2: 6,
        color: 'yellow',
        onUpdate: render,
        ease: 'sine'

    })
    .to(nodes, {

        delay : (i, target) => (i % 10) * 0.1,
        duration: 1.75,
        a1: (i, target) => pega_valor_futuro(target, 'primeira')[0],
        a2: (i, target) => pega_valor_futuro(target, 'primeira')[1],
        color: (i, target) => pega_valor_futuro_color(target, 'primeira'),
        onUpdate: render,
        ease: 'sine'

    })
    .to(nodes, {

        delay : (i, target) => (i % 10) * 0.1 + 1.5,
        duration: 1.75,
        a1: (i, target) => pega_valor_futuro(target, 'segunda')[0],
        a2: (i, target) => pega_valor_futuro(target, 'segunda')[1],
        color: (i, target) => pega_valor_futuro_color(target, 'segunda'),
        onUpdate: render,
        ease: 'sine'

    })
    .to(nodes, {

        delay : (i, target) => (i % 10) * 0.1 + 1.5,
        duration: 1.75,
        a1: (i, target) => pega_valor_futuro(target, 'terceira')[0],
        a2: (i, target) => pega_valor_futuro(target, 'terceira')[1],
        color: (i, target) => pega_valor_futuro_color(target, 'terceira'),
        onUpdate: render,
        ease: 'sine'

    })
    .to(nodes, {

        delay: 2,
        duration: 2.5,
        color: 'cyan',
        a1 : (i, target) => target.angulos.inicial[0],
        a2 : (i, target) => target.angulos.inicial[1],
        onUpdate: render,
        ease: 'sine'

    })
    .to(nodes, {

        delay: 1,
        duration: 2.5,
        color: 'white',
        a1 : 4,
        a2 : 4,
        onUpdate: render,
        ease: 'sine'

    })
    
console.log('Inspirado por NO REASON.')




